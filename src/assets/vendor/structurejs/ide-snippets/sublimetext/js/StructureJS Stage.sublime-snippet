<snippet>
	<content><![CDATA[
define(function(require, exports, module) { // jshint ignore:line
    'use strict';
 
    // Imports
    var Extend = require('structurejs/util/Extend');
    var Stage = require('structurejs/display/Stage');
 
    /**
     * TODO: YUIDoc_comment
     *
     * @class ${TM_FILENAME/(.*)[.](.*)/$1/g}
     * @extends Stage
     * @constructor
     **/
    var ${TM_FILENAME/(.*)[.](.*)/$1/g} = (function () {
 
        var _super = Extend(${TM_FILENAME/(.*)[.](.*)/$1/g}, Stage);
 
        function ${TM_FILENAME/(.*)[.](.*)/$1/g}() {
            _super.call(this);
 
 			$2
        }
 
        /**
         * @overridden Stage.create
         */
        ${TM_FILENAME/(.*)[.](.*)/$1/g}.prototype.create = function () {
            _super.prototype.create.call(this);
 
            // Create or setup objects in this parent class.
        };
 
        /**
         * @overridden Stage.enable
         */
        ${TM_FILENAME/(.*)[.](.*)/$1/g}.prototype.enable = function () {
            if (this.isEnabled === true) { return; }
 
            // Enable the child objects and/or add any event listeners.
 
            _super.prototype.enable.call(this);
        };
 
        /**
         * @overridden Stage.disable
         */
        ${TM_FILENAME/(.*)[.](.*)/$1/g}.prototype.disable = function () {
            if (this.isEnabled === false) { return; }
 
            // Disable the child objects and/or remove any event listeners.
 
            _super.prototype.disable.call(this);
        };

        /**
         * @overridden Stage.layout
         */
        ${TM_FILENAME/(.*)[.](.*)/$1/g}.prototype.layout = function () {
            // Layout or update the objects in this parent class.
        };
 
        /**
         * @overridden Stage.destroy
         */
        ${TM_FILENAME/(.*)[.](.*)/$1/g}.prototype.destroy = function () {
            this.disable();

            // Call destroy on any child objects.
            // This super method will also null out your properties for garbage collection.
            
            _super.prototype.destroy.call(this);
        };
 
        return ${TM_FILENAME/(.*)[.](.*)/$1/g};
    })();
 
    module.exports = ${TM_FILENAME/(.*)[.](.*)/$1/g};
 
});
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>stageClass</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.js</scope>
</snippet>
